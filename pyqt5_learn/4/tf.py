# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tf.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json
import os
import sys
import time

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidgetItem, QHeaderView


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1100, 650)
        MainWindow.setMinimumSize(1100, 650)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setObjectName("widget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.groupBox_3 = QtWidgets.QGroupBox(self.widget)
        self.groupBox_3.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox_3.setObjectName("groupBox_3")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.groupBox_3)
        self.gridLayout_3.setObjectName("gridLayout_3")

        column_name = ['采集时间', '采集状态', '保存路径']
        self.tableWidget = QtWidgets.QTableWidget(self.groupBox_3)
        # self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        # self.tableWidget.horizontalHeader().setSectionResizeMode(0, QHeaderView.Fixed)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(3)
        # self.tableWidget.setColumnWidth(0, 300)
        # self.tableWidget.setColumnWidth(1, 200)
        self.tableWidget.setHorizontalHeaderLabels(column_name)
        self.gridLayout_3.addWidget(self.tableWidget, 0, 0, 1, 1)

        self.horizontalLayout_2.addWidget(self.groupBox_3)
        self.groupBox_4 = QtWidgets.QGroupBox(self.widget)
        self.groupBox_4.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox_4.setObjectName("groupBox_4")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.groupBox_4)
        self.gridLayout_4.setObjectName("gridLayout_4")

        self.tableWidget_2 = QtWidgets.QTableWidget(self.groupBox_3)
        self.tableWidget_2.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(3)
        # self.tableWidget.setColumnWidth(0, 300)
        # self.tableWidget.setColumnWidth(1, 200)
        self.tableWidget_2.setHorizontalHeaderLabels(column_name)
        self.gridLayout_4.addWidget(self.tableWidget_2, 0, 0, 1, 1)

        self.update_data_thread = UpdateData()
        self.update_data_thread.update_date.connect(self.set_table)  # 链接信号
        self.update_data_thread.start()

        self.horizontalLayout_2.addWidget(self.groupBox_4)
        self.verticalLayout.addWidget(self.widget)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        MainWindow.setCentralWidget(self.centralwidget)

        self.window_clicked()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "站外采集器"))
        self.groupBox_3.setTitle(_translate("MainWindow", "twitter采集记录"))
        self.groupBox_4.setTitle(_translate("MainWindow", "facebook采集记录"))
        self.pushButton.setText(_translate("MainWindow", "采集开始"))

    def window_clicked(self):
        # self.pushButton.clicked.connect(self.set_table)
        # self.pushButton.clicked.connect(self.start)
        pass

    def start(self):
        start_run()

    def set_table(self, data_list):
        tt_data_list = data_list[0]
        fb_data_list = data_list[1]
        self.table_clear(tableWidget=self.tableWidget)
        self.table_clear(tableWidget=self.tableWidget_2)
        # data_list = [[13123123121312312312, 2, 3], [11312312312312312312, 5, 6], [11312312312312312312, 8, 9]]
        # while True:
        #     get_oldData(index='facebook')
        self.set_data(data_list=tt_data_list, tableWidget=self.tableWidget)
        self.set_data(data_list=fb_data_list, tableWidget=self.tableWidget_2)

    def table_clear(self, tableWidget):
        row = tableWidget.rowCount()
        for row in range(row):
            tableWidget.removeRow(0)

    def set_data(self, data_list: list, tableWidget):
        for i, item_list in enumerate(data_list):
            tableWidget.insertRow(i)
            for j, item in enumerate(item_list):
                tableWidget.setItem(i, j, QTableWidgetItem(str(item)))


class UpdateData(QThread):
    update_date = pyqtSignal(list)

    def run(self):
        while True:
            # end = get_oldData()
            # self.update_date.emit(end)    # 只能传递str

            tt_data_list = [[13123123121312312312, 2, 3], [11312312312312312312, 5, 6], [11312312312312312312, 8, 9]]
            fb_data_list = [[13123123121312312312, 2, 3], [11312312312312312312, 5, 6], [11312312312312312312, 8, 9]]
            data_list = [tt_data_list, fb_data_list]
            self.update_date.emit(data_list)
            time.sleep(50)


class MyMainForm(QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(MyMainForm, self).__init__(parent)
        self.setupUi(self)


def get_oldData(index):
    if index == 'facebook':
        path = "./status/facebook_status.json"
    else:
        path = "./status/twitter_status.json"
    if not os.path.exists("./status"):
        return None
    if not os.path.exists(path):
        return None
    with open(path, 'r', encoding='utf-8') as file:
        if not file.read():
            return None
        else:
            old_data = json.load(file)
    end = list()
    for i in old_data:
        index = dict()
        index['CreateTime'] = i.get("CreateTime")
        index['Status'] = i.get("Status")
        index['SavePath'] = i.get("SavePath")
        end.append(index)
    return end


if __name__ == '__main__':
    app = QApplication(sys.argv)
    demo = MyMainForm()
    demo.show()
    sys.exit(app.exec_())
