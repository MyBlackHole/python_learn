# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'testui.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json
import sys
import time

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtWidgets import QMainWindow, QApplication, QMessageBox, QTableWidget, QTableWidgetItem


class UiMainWindow(object):
    def setupUi(self, main_window):
        main_window.setObjectName("MainWindow")
        main_window.setEnabled(True)
        main_window.resize(500, 500)
        main_window.setMinimumSize(QtCore.QSize(500, 500))
        main_window.setMaximumSize(QtCore.QSize(500, 500))
        self.central_widget = QtWidgets.QWidget(main_window)
        self.central_widget.setObjectName("central_widget")
        self.grid_layout = QtWidgets.QGridLayout(self.central_widget)
        self.grid_layout.setObjectName("gridLayout")
        self.tab_widget = QtWidgets.QTabWidget(self.central_widget)
        self.tab_widget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.tab_widget.setTabPosition(QtWidgets.QTabWidget.West)
        self.tab_widget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tab_widget.setDocumentMode(False)
        self.tab_widget.setTabsClosable(False)
        self.tab_widget.setMovable(False)
        self.tab_widget.setTabBarAutoHide(False)
        self.tab_widget.setObjectName("tabWidget")

        self.tab_1 = QtWidgets.QWidget()
        self.tab_1.setObjectName("tab_1")
        # self.tab_1.setStyleSheet('QWidget{background-color:rgb(0,0,0)}')

        self.vertical_layout = QtWidgets.QVBoxLayout(self.tab_1)
        self.vertical_layout.setObjectName("verticalLayout")

        self.push_button = QtWidgets.QPushButton(self.tab_1)
        self.push_button.setObjectName("pushButton")

        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.tab_1)
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.vertical_layout.addWidget(self.plainTextEdit)
        self.vertical_layout.addWidget(self.push_button)
        self.tab_widget.addTab(self.tab_1, "")

        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")

        self.verticalLayout2 = QtWidgets.QVBoxLayout(self.tab_2)
        self.verticalLayout2.setObjectName("verticalLayout2")

        self.tab_widget.addTab(self.tab_2, "")
        self.grid_layout.addWidget(self.tab_widget, 0, 0, 1, 1)
        main_window.setCentralWidget(self.central_widget)
        self.statusbar = QtWidgets.QStatusBar(main_window)
        self.statusbar.setObjectName("statusbar")
        main_window.setStatusBar(self.statusbar)

        myTable = MyTable()

        update_data_thread = UpdateData()
        update_data_thread.update_date.connect(myTable.update_item_data)  # 链接信号
        update_data_thread.start()

        self.verticalLayout2.addWidget(myTable)
        self.tab_2.setLayout(self.verticalLayout2)

        self.retranslateUi(main_window)
        self.tab_widget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(main_window)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "推特采集"))
        self.push_button.setText(_translate("MainWindow", "添加任务"))
        self.tab_widget.setTabText(self.tab_widget.indexOf(self.tab_1), _translate("MainWindow", "任务"))
        self.tab_widget.setTabText(self.tab_widget.indexOf(self.tab_2), _translate("MainWindow", "历史"))

    def get_text(self):
        text = self.plainTextEdit.toPlainText()
        print(type(text))
        QMessageBox.warning(QMainWindow(), "警告对话框", "继续执行会导致系统重启，你确定要继续？", QMessageBox.Yes | QMessageBox.No)


class MyTable(QTableWidget):
    def __init__(self, parent=None):
        super(MyTable, self).__init__(parent)
        self.resize(600, 200)
        self.setColumnCount(3)
        self.setColumnWidth(0, 300)

        column_name = ['博主主页', '状态', '时间']
        self.setHorizontalHeaderLabels(column_name)

    def update_item_data(self, _list_str):
        self.my_clear()
        self.set_data(_list_str=_list_str)

    def my_clear(self):
        row = self.rowCount()
        for row in range(row):
            self.removeRow(0)

    def set_data(self, _list_str: str):
        _list = json.loads(_list_str)

        for i, item_list in enumerate(_list):
            self.insertRow(i)
            print(i)
            for j, item in enumerate(item_list):
                self.setItem(i, j, QTableWidgetItem(str(item)))


class UpdateData(QThread):
    update_date = pyqtSignal(str)

    def run(self):
        _list = [[1, 2, 3], [4, 5, 6]]
        i = 7
        j = 8
        k = 9
        while True:
            _list.append([i, j, k])

            self.update_date.emit(json.dumps(_list))
            i += 1
            j += 1
            k += 1
            time.sleep(4)


class MyMainForm(QMainWindow, UiMainWindow):
    def __init__(self, parent=None):
        super(MyMainForm, self).__init__(parent)
        self.setupUi(self)


if __name__ == '__main__':
    from TabBarStyle import TabBarStyle

    app = QApplication(sys.argv)
    demo = MyMainForm()
    app.setStyle(TabBarStyle())
    demo.show()
    sys.exit(app.exec_())
